import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Load data
df = pd.read_csv("/Users/amriteshjangir/Downloads/landslide.csv")
# Convert to datetime
if "event_date" in df.columns:
    df["event_date"] = pd.to_datetime(df["event_date"], errors='coerce')
    df = df.dropna(subset=["event_date"])
    df["month"] = df["event_date"].dt.month
    df["day_of_week"] = df["event_date"].dt.day_name()
    df["hour"] = df["event_date"].dt.hour
else:
    print("ERROR: 'event_date' column not found.")
    exit()

# Setup
sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12, 6)

def auto_pause(seconds=3):
    plt.pause(seconds)
    plt.close()

# 1. Correlation Heatmap
plt.figure()
corr = df.select_dtypes(include='number').corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("1. Correlation Heatmap")
plt.tight_layout()
plt.show()
auto_pause()

# 2. Monthly Landslide Frequency
plt.figure()
sns.countplot(data=df, x="month", palette="magma")
plt.title("2. Monthly Landslide Frequency")
plt.xlabel("Month")
plt.ylabel("Count")
plt.tight_layout()
plt.show()
auto_pause()

# 3. Environmental Conditions
env_features = ["precipitation", "temperature", "slope_angle"]
for feature in env_features:
    if feature not in df.columns:
        df[feature] = np.random.normal(loc=50, scale=10, size=len(df))
        print(f" Added dummy column for missing: {feature}")
    plt.figure()
    sns.histplot(df[feature].dropna(), kde=True, color='teal')
    plt.title(f"3. Distribution of {feature}")
    plt.xlabel(feature)
    plt.ylabel("Frequency")
    plt.tight_layout()
    plt.show()
    auto_pause()

# 4. Human Activity Influence
if "population_density" not in df.columns:
    df["population_density"] = np.random.randint(100, 1000, size=len(df))
    print(" Added dummy column for missing: population_density")
if "landslide_category" not in df.columns:
    df["landslide_category"] = np.random.choice(["Low", "Medium", "High"], size=len(df))
    print(" Added dummy column for missing: landslide_category")

plt.figure()
sns.boxplot(data=df, x="landslide_category", y="population_density", palette="flare")
plt.title("4. Population Density vs Landslide Category")
plt.tight_layout()
plt.show()
auto_pause()

# 5. Landslide Types
if "landslide_type" not in df.columns:
    df["landslide_type"] = np.random.choice(["Rockfall", "Mudslide", "Debris Flow"], size=len(df))
    print(" Added dummy column for missing: landslide_type")

plt.figure()
sns.countplot(data=df, x="landslide_type", palette="Set2", order=df["landslide_type"].value_counts().index)
plt.title("5. Types of Landslides")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
auto_pause()

# 6. Top Locations - Lollipop Chart
if "location" not in df.columns:
    df["location"] = np.random.choice(["Area A", "Area B", "Area C", "Area D"], size=len(df))
    print(" Added dummy column for missing: location")

top_locs = df["location"].value_counts().nlargest(10)
plt.figure()
markerline, stemlines, baseline = plt.stem(top_locs.index, top_locs.values, basefmt=" ", linefmt='C0-', markerfmt='C0o')
plt.setp(markerline, markersize=10)
plt.title("6. Top 10 Locations with Most Landslides")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
auto_pause()

# 7. Day of the Week
plt.figure()
sns.countplot(data=df, x="day_of_week", order=["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], palette="pastel")
plt.title("7. Landslides by Day of the Week")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
auto_pause()

# 8. Hour of the Day
plt.figure()
sns.histplot(data=df, x="hour", bins=24, kde=True, color="indigo")
plt.title("8. Landslides by Hour of the Day")
plt.xlabel("Hour")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()
auto_pause()

# 9. Outlier Detection (IQR)
def detect_outliers_iqr(data, column):
    Q1 = data[column].quantile(0.25)
    Q3 = data[column].quantile(0.75)
    IQR = Q3 - Q1
    return data[(data[column] < Q1 - 1.5 * IQR) | (data[column] > Q3 + 1.5 * IQR)]

outlier_cols = ["fatalities", "injuries", "economic_loss"]
for col in outlier_cols:
    if col not in df.columns:
        df[col] = np.random.randint(0, 50, size=len(df))
        print(f" Added dummy column for missing: {col}")
    outliers = detect_outliers_iqr(df, col)
    plt.figure()
    sns.boxplot(data=df, y=col, color="orange")
    plt.title(f"9. {col} - Outlier Detection")
    plt.tight_layout()
    plt.show()
    print(f"Outliers in {col}: {len(outliers)} rows")
    auto_pause()

print(" All 9 charts shown â€” with fallback data where needed.")
